{"version":3,"sources":["ng://hp-components/lib/hp-components.service.ts","ng://hp-components/lib/scripts/math.ts","ng://hp-components/lib/scripts/dom.ts","ng://hp-components/lib/services/drag.service.ts","ng://hp-components/lib/services/size.service.ts","ng://hp-components/lib/selector/selector.service.ts","ng://hp-components/lib/interaction/interaction.service.ts","ng://hp-components/lib/interaction/interaction.component.ts","ng://hp-components/lib/composer/composer.component.ts","ng://hp-components/lib/treeview/treeview.component.ts","ng://hp-components/lib/treeview/treeview-item/treeview-item.component.ts","ng://hp-components/lib/selector/selector.component.ts","ng://hp-components/lib/file-manager/file-manager.component.ts","ng://hp-components/lib/property-grid/property-grid.component.ts","ng://hp-components/lib/hp-components.module.ts"],"names":["HpComponentsService","Injectable","args","providedIn","Rect","left","top","width","height","this","Object","defineProperty","prototype","Point","right","bottom","Size","x","y","add","point","subtract","offset","el","box","getBoundingClientRect","pixToNum","value","length","newValue","replace","parseFloat","elementsAtRect","parent","rect","exclude","result","childElements","element","orderByZOrder","Array","children","i","child","parentElement","className","indexOf","push","forEach","intersect","a","b","elementBounds","elementPos","computedStyles","getComputedStyle","relativeToPage","scale","pos","elementPagePos","size","elementSize","parentTree","lastClass","inclusive","classList","contains","style","clientLeft","clientTop","assignBoundingRect","renderer","source","target","sourceRect","setStyle","childrenOf","deep","removeHelperChildren","array","index","item","splice","from","querySelectorAll","filter","pointInRect","elementDraggable","elementLocked","elementSizable","DragService","createDragOverlay","cloneNode","addClass","dragCursor","dragElementsBy","delta","elements","_this","moveElementBy","dom.moveElementBy","canDrag","dom.elementDraggable","findDropZone","draggedElement","elementAtPoint","elRect","dom.elementAtPoint","dom.offset","updateDropZone","clearDropZones","dropZone","dom.childrenOf","removeClass","dropElement","changeParent","newParent","parentPos","elPos","newPos","appendChild","moveElementTo","position","dom.changeParent","error","console","log","ngOnDestroy","SizeService","gripKey","substr","o","orientation","orientations","find","includes","removeSizingGrips","removeChild","createSizingOverlay","sizeElementsBy","sizeElementBy","currentBounds","dom.elementBounds","isSizingFromTop","isSizingFromLeft","isHorizontalSizing","isVerticalSizing","boundsRect","minWidth","minHeight","setElementRect","dom.setElementRect","prepareToSize","canSize","dom.elementSizable","addSizingGrips","parentEl","setProperty","Draggable","Sizable","Idle","Overlay","Selector","SelectorService","_sizeService","_dragService","_componentFactoryResolver","_injector","_activeSelector","_state","state","SelectionState","createSelectionOverlays","_lassoSelector","_selectors","entries","selectors","map","selectorEl","clientEl","interactionHost","isSelectable","dom.isSelectable","createlassoSelector","clearSelectors","isLassoSelectable","selector","createSelector","lassoCursor","removelassoSelector","selectorAtPoint","dom.pointInRect","selectCapturedElements","dom.elementsAtRect","selectElement","shouldAllowSizing","unSelectAll","unSelectElement","clearSelector","selectAll","selectableElements","clearFirst","isSizable","overlay","hasAttribute","cursor","getAttribute","dom.assignBoundingRect","createElement","values","resizeLasso","initialPos","Math","abs","top_1","resizeSelectorsBy","resizeOverlaysBy","overlays","moveSelectorsBy","moveOverlaysBy","reselect","clients","client","nudgeBy","nodgeType","NudgeType","ComponentFactoryResolver","Injector","InteractionService","_selectionService","Subject","_deleteElementSubject","asObservable","_deleteSelectedElementsSubject","_addElementSubject","BehaviorSubject","_selectedElementsSubject","_selectedElements","next","deleteElement","deleteElements","_deleteElementsSubject","deleteSelectedElements","deleteAll","addElement","focus","addContainer","selectedElements","InteractionComponent","_renderer","_interactionService","EventEmitter","_keyDownSubject","subscribe","e","keyDownHandler","keyUp","code","keyPress","stopPropagation","keyDown","snap","cancelSelection","shiftKey","ctrlKey","selectorElements","dragStart","pointerMove","preventDefault","_isMouseDown","mousePos","getRelativePointerPos","hasLasso","mouseDownPos","_mouseDownPos","mouseChange","getPointerChange","_lastDropZone","activeSelector","_el","nativeElement","_lastMousePos","ensureCursor","pointerDown","pointerUp","moveSelectedElements","tryDropSelectedElements","resizeSelectedElements","_cursor","canDrop","pageX","pageY","sizedElements","resizedElement","emit","resetSelection","resizedElements","nudgeType","resetAfterMove","movedElements","assignPosition","dom.assignPosition","movedElement","deletedElements","canDelete","isContainer","dom.isContainer","relativePos","dom.getRelativePointerPos","pointerPos","ngOnInit","_deleteSelectedElementsSubscription","deleteSelectedElements$","_addElementSubscription","addElement$","unsubscribe","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","Renderer2","ViewChild","Input","Output","ComposerComponent","TreeviewComponent","TreeviewItemComponent","SelectorComponent","FileManagerComponent","PropertyGridComponent","HpComponentsModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HpComponentsService {\n\n  constructor() { }\n}\n","export class Rect {\n  constructor(public left: number = 0, public top: number = 0, public width: number = 0, public height: number = 0) { }\n  get right(): number {\n    return this.left + this.width;\n  }\n  get bottom(): number {\n    return this.top + this.height;\n  }\n  get isEmpty(): boolean {\n    return (this.height + this.width) === 0;\n  }\n  get topLeft(): Point {\n    return new Point(this.left, this.top);\n  }\n  get topRight(): Point {\n    return new Point(this.right, this.top);\n  }\n  get bottomLeft(): Point {\n    return new Point(this.left, this.bottom);\n  }\n  get bottomRight(): Point {\n    return new Point(this.right, this.bottom);\n  }\n\n}\nexport class Size {\n  constructor(public height: number = 0, public width: number = 0) { }\n}\n\nexport class Point {\n  constructor(public x: number = 0, public y: number = 0) { }\n  add(point: Point) {\n    this.x = this.x + point.x;\n    this.y = this.y + point.y;\n  }\n  subtract(point: Point) {\n    this.x = this.x - point.x;\n    this.y = this.y - point.y;\n  }\n}\n","import {Point, Rect, Size} from './math';\nimport {Renderer2} from '@angular/core';\n\nexport function offset2(el: HTMLElement): Point {\n   const result = new Point(el.offsetLeft, el.offsetTop);\n   if (el.parentElement) {\n     result.add(offset(el.parentElement));\n   }\n   return result;\n}\n\nexport function offset(el: HTMLElement): Point {\n  const box = el.getBoundingClientRect();\n  const top = box.top;\n  const left = box.left;\n  return new Point(left, top);\n}\n\nexport function pixToNum(value: string): number {\n  if (!value || value.length === 0) {\n    return 0;\n  }\n  const newValue = value.replace('px', '').replace('em', '');\n  return parseFloat(newValue);\n}\n\nexport function numToPix(value: number, autoWhenZero: boolean = false): string {\n  if (value == null) {\n    value = 0;\n  }\n  if (autoWhenZero && value === 0) {\n    return 'auto';\n  }\n  return value.toString() + 'px';\n}\n\nexport function childElements(element: HTMLElement, orderByZOrder = false): HTMLElement[] {\n  const result = new Array<HTMLElement>();\n  if (!element) {\n    return result;\n  }\n  const children = element.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i] as HTMLElement;\n    if (child && child.parentElement === element &&\n      child.className.indexOf('hpc-lasso-selector') === -1 &&\n      child.className.indexOf('hpc-element-selector') === -1 &&\n      child.className.indexOf('grip') === -1) {\n      result.push(child);\n    }\n  }\n\n  if (orderByZOrder) {\n    // result = Enumerable.from(result).orderBy(x => parseInt(x.style.zIndex, NaN)).toArray();\n  }\n  return result;\n}\n\nexport function removeHelperChildren(children: HTMLElement[]) {\n  for (let i = children.length - 1; i >= 0; i--) {\n    const child = children[i] as HTMLElement;\n    if (child.className.indexOf('hpc-lasso-selector') > -1 ||\n      child.className.indexOf('hpc-element-selector') > -1 ||\n      child.className.indexOf('hpc-drag-overlay') > -1 ||\n      child.className.indexOf('grip-container') > -1 ||\n      child.className.indexOf('grip') > -1) {\n      removeArrayItem(children, child);\n    }\n  }\n}\n\n\nexport function removeArrayItem(array: any[], item: any) {\n  const index = typeof(item) === 'number' ? item : array.indexOf(item) ;\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n}\n\nexport function intersect(a: Rect, b: Rect): boolean {\n  return (a.left <= b.right &&\n    b.left <= a.right &&\n    a.top <= b.bottom &&\n    b.top <= a.bottom);\n}\n\nexport function  elementsAtRect(parent: HTMLElement, rect: Rect, exclude: HTMLElement[] = []) {\n  const result = [];\n    childElements(parent).forEach(element => {\n    if (intersect(elementBounds(element), rect)) {\n      if (exclude == null || exclude.indexOf(element) === -1) {\n        result.push(element);\n      }\n    }\n  });\n  return result;\n}\n\nexport function elementPos(element: HTMLElement): Point {\n  const computedStyles = getComputedStyle(element, null);\n  return new Point(pixToNum(computedStyles.left), pixToNum(computedStyles.top));\n}\n\nexport function elementSize(element: HTMLElement): Size {\n  const computedStyles = getComputedStyle(element, null);\n  return new Size(pixToNum(computedStyles.height), pixToNum(computedStyles.width));\n}\n\nexport function elementBounds(element: HTMLElement, relativeToPage: boolean = false, scale: Point = null): Rect {\n  let pos = elementPos(element);\n  if (relativeToPage) {\n    pos = elementPagePos(element);\n  }\n  const size = elementSize(element);\n  if (scale) {\n    size.width = size.width * scale.x;\n    size.height = size.height * scale.y;\n  }\n  return new Rect(pos.x, pos.y, size.width, size.height);\n}\n\nexport function elementPagePos(element: HTMLElement): Point {\n  const result = elementPos(element);\n  if (element.parentElement == null) {\n    return result;\n  }\n  let left = result.x;\n  let top = result.y;\n  const parents = parentTree(element);\n  parents.forEach(parent => {\n    left += pixToNum(parent.style.left) + parent.clientLeft;\n    top += pixToNum(parent.style.top) + parent.clientTop;\n  });\n  return new Point(left, top);\n}\n\n\nexport function parentTree(element: HTMLElement, lastClass: string = 'surface', inclusive = false): Array<HTMLElement> {\n  const result = new Array<HTMLElement>();\n  if (!element) {\n    return result;\n  }\n  let parent = element.parentElement;\n  while (parent != null) {\n    if (!inclusive && parent.classList.contains(lastClass)) {\n      break;\n    }\n    result.push(parent);\n    if (parent.classList.contains(lastClass)) {\n      break;\n    }\n    parent = parent.parentElement;\n  }\n  return result;\n}\n\nexport function moveElementTo(renderer: Renderer2, element: HTMLElement, position: Point): void {\n  if (!element) { return; }\n  renderer.setStyle(element, 'top', position.y + 'px');\n  renderer.setStyle(element, 'left', position.x + 'px');\n}\n\nexport function moveElementBy(renderer: Renderer2, element, delta: Point) {\n  if (!element) { return; }\n  const pos = elementPos(element);\n  const top = pos.y + delta.y;\n  const left = pos.x + delta.x;\n  renderer.setStyle(element, 'top', top + 'px');\n  renderer.setStyle(element, 'left', left + 'px');\n}\n\nexport function sizeElementBy(renderer: Renderer2, element, delta: Point) {\n  if (!element) { return; }\n  const size = elementSize(element);\n  const height = size.height + delta.y;\n  const width = size.width + delta.x;\n  renderer.setStyle(element, 'height', height + 'px');\n  renderer.setStyle(element, 'width', width + 'px');\n}\n\nexport function assignBoundingRect(renderer: Renderer2, source: HTMLElement, target: HTMLElement) {\n  const sourceRect = elementBounds(source);\n  // const styles = getComputedStyle(source);\n  const top = sourceRect.top; // + pixToNum(styles.marginTop);\n  const left = sourceRect.left; // + pixToNum(styles.marginLeft);\n  renderer.setStyle(target, 'top', top + 'px');\n  renderer.setStyle(target, 'left', left + 'px');\n  renderer.setStyle(target, 'height', sourceRect.height + 'px');\n  renderer.setStyle(target, 'width', sourceRect.width + 'px');\n}\n\nexport function assignPosition(renderer: Renderer2, source: HTMLElement, target: HTMLElement) {\n  const sourceRect = elementBounds(source);\n  const pos = elementPos(source);\n  renderer.setStyle(target, 'top', pos.y + 'px');\n  renderer.setStyle(target, 'left', pos.x + 'px');\n}\n\nexport function setElementRect(renderer: Renderer2, rect: Rect, element: HTMLElement) {\n  renderer.setStyle(element, 'top', rect.top + 'px');\n  renderer.setStyle(element, 'left', rect.left + 'px');\n  renderer.setStyle(element, 'height', rect.height + 'px');\n  renderer.setStyle(element, 'width', rect.width + 'px');\n}\n\nexport function childrenOf(parent: HTMLElement, deep = false, exclude = []): HTMLElement[] {\n  let result = [];\n  if (parent) {\n    if (deep) {\n      result = Array.from(parent.querySelectorAll('*'));\n    } else {\n      result = Array.from(parent.children);\n    }\n    removeHelperChildren(result);\n    result = result.filter(x => !(x in exclude));\n  }\n  return result;\n}\n\nexport function pointInRect(point: Point, rect: Rect): boolean {\n  return point.x >= rect.left && point.x <= rect.right && point.y >= rect.top && point.y <= rect.bottom;\n}\n\n/**\n* Returns the first child element of the parent element at a given point.\n* If there are no child elements at the given point, then the parent element is returned.\n*/\nexport function elementAtPoint(pos: Point, parent: HTMLElement, exclude = []): HTMLElement {\n    let result = parent;\n    const children = childrenOf(parent, false, exclude);\n    for (let index = 0; index < children.length; index++) {\n      const child = children[index];\n      const elRect = child.getBoundingClientRect();\n      const rect = new Rect(elRect.left, elRect.top, elRect.width, elRect.height);\n      if (exclude.indexOf(child) === -1 && pointInRect(pos, rect)) {\n        result = elementAtPoint(pos, child, exclude);\n        break;\n       }\n    }\n    return result;\n}\n\nexport function xelementAtPoint(pos: Point, parent: HTMLElement, exclude = []): HTMLElement {\n  let result = parent;\n  const children = childElements(parent);\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index];\n    const elRect = child.getBoundingClientRect();\n    const rect = new Rect(elRect.left, elRect.top, elRect.width, elRect.height);\n    if (exclude.indexOf(child) === -1 && pointInRect(pos, rect)) {\n      result = child;\n      break;\n    }\n  }\n  return result;\n}\n\nexport function changeParent(element: HTMLElement, newParent: HTMLElement, renderer: Renderer2) {\n  if (!newParent || element.parentElement === newParent) {\n    return;\n  }\n  const parentPos = elementPagePos(newParent);\n  const elPos = elementPagePos(element);\n  const newPos = new Point(elPos.x - parentPos.x, elPos.y - parentPos.y);\n  renderer.appendChild(newParent, element);\n  moveElementTo(renderer, element, newPos);\n}\n\nexport function getScaledPos(element: HTMLElement, scale: number): Point {\n    const pos = offset(element);\n    return new Point(\n      pos.x / scale,\n      pos.y / scale\n    );\n}\n\nexport function getRelativePointerPos(e: PointerEvent, element: HTMLElement, scale = 1) {\n  const relativePos = offset(element);\n  return new Point(\n    (e.pageX - relativePos.x) / scale,\n    (e.pageY - relativePos.y) / scale\n  );\n}\n\nexport function elementDraggable(element: Element) {\n  return !elementLocked(element) && element.className.indexOf('hpc-no-drag') === -1;\n}\n\nexport function elementSizable(element: Element) {\n  return !elementLocked(element) && element.className.indexOf('hpc-no-size') === -1;\n}\n\nexport function elementLocked(element: Element): boolean {\n  return element.className.indexOf('hpc-locked') > -1;\n}\n\nexport function isContainer(element: Element): boolean {\n  return element.classList.contains('hpc-container');\n}\n\nexport function isSelectable(element: Element): boolean {\n  return !element.classList.contains('hpc-no-select');\n}\n\n\n","import { Injectable, Renderer2, OnDestroy } from '@angular/core';\nimport { Point } from '../scripts/math';\nimport * as dom from '../scripts/dom';\n\n@Injectable()\nexport class DragService implements OnDestroy  {\n  dragCursor = 'move';\n  renderer: Renderer2;\n\n  constructor() {}\n\n  createDragOverlay(element: HTMLElement): HTMLElement {\n    const result = element.cloneNode(true) as HTMLElement;\n    this.renderer.addClass(result, 'hpc-drag-overlay');\n    this.renderer.setStyle(result, 'cursor', this.dragCursor);\n    this.renderer.setStyle(result, 'zIndex', 10000);\n    return result;\n  }\n\n  dragElementsBy(delta: Point, elements: HTMLElement[]) {\n    elements.forEach(element => {\n      if (element) {\n        dom.moveElementBy(this.renderer, element, delta);\n      }\n    });\n  }\n\n  canDrag(element: Element): boolean {\n    return dom.elementDraggable(element);\n  }\n\n  /**\n   * Returns a child HTMLElement located at the top-left coordinates of the\n   * draggedElement with an attribute of is-dropzone set to true.\n   *\n   * @param HTMLElement draggedElement\n   * @param HTMLElement parent\n   * @returns HTMLElement\n   */\n  findDropZone(draggedElement: HTMLElement, parent: HTMLElement, exclude = []): HTMLElement {\n    if (!draggedElement) {\n      return null;\n    }\n    exclude.push(draggedElement);\n    const pos = dom.offset(draggedElement);\n    const el = dom.elementAtPoint(pos, parent, exclude);\n    if (el !== parent && el.classList.contains('hpc-dropzone')) {\n      return el;\n    }\n    return null;\n  }\n\n  updateDropZone(draggedElement: HTMLElement, parent: HTMLElement, exclude = []): HTMLElement {\n    this.clearDropZones(parent);\n    const dropZone = this.findDropZone(draggedElement, parent, exclude);\n    if (dropZone) {\n      this.renderer.addClass(dropZone, 'active');\n    }\n    return dropZone;\n  }\n\n  clearDropZones(parent: HTMLElement) {\n    const children = dom.childrenOf(parent, true);\n    children.forEach(child => {\n      this.renderer.removeClass(child, 'active');\n    });\n  }\n\n  dropElement(dropZone: HTMLElement, draggedElement: HTMLElement,  parent: HTMLElement) {\n      try {\n        dom.changeParent(draggedElement, dropZone, this.renderer);\n      } catch (error) {\n        console.log(error);\n        // -- todo log error;\n      }\n  }\n\n\n  ngOnDestroy(): void {\n    this.renderer = null;\n  }\n}\n","import { Injectable, Renderer2, OnDestroy } from '@angular/core';\nimport * as dom from '../scripts/dom';\nimport { Point, Rect } from '../scripts/math';\n\n@Injectable()\nexport class SizeService implements OnDestroy {\n  renderer: Renderer2;\n\n  get isHorizontalSizing(): boolean {\n    return this.gripKey === 'lm' || this.gripKey === 'rm';\n  }\n\n  get isVerticalSizing(): boolean {\n    return this.gripKey === 'tm' || this.gripKey === 'bm';\n  }\n\n  get isSizingFromTop(): boolean {\n    return (\n      this.gripKey === 'tl' || this.gripKey === 'tm' || this.gripKey === 'tr'\n    );\n  }\n  get isSizingFromLeft(): boolean {\n    return (\n      this.gripKey === 'tl' || this.gripKey === 'lm' || this.gripKey === 'bl'\n    );\n  }\n  get isRotating(): boolean {\n    return this.gripKey === 'rotate';\n  }\n\n  get orientation(): string {\n    return this.gripKey.substr(0, 1);\n  }\n\n  get reverseOrientation(): string {\n    const o = this.orientation;\n    return this.orientations.find(x => x.includes(o)).replace(o, '');\n  }\n\n  minHeight = 40;\n  minWidth = 40;\n\n  cursor: string;\n  gripKey: string;\n  constructor() {}\n\n  orientations = ['tb', 'rl'];\n\n  removeSizingGrips(parent: HTMLElement, renderer: Renderer2) {\n    Array.from(parent.children).forEach(child => {\n      if (child.className.indexOf('grip-container') > -1) {\n        renderer.removeChild(parent, child);\n      }\n    });\n  }\n\n  createSizingOverlay(element: HTMLElement): HTMLElement {\n    const result = element.cloneNode(false) as HTMLElement;\n    this.renderer.addClass(result, 'hpc-sizer-overlay');\n    this.renderer.setStyle(result, 'border-style', 'solid');\n    this.renderer.setStyle(result, 'cursor', 'inherit');\n    return result;\n  }\n\n  sizeElementsBy(delta: Point, elements: HTMLElement[]) {\n    elements.forEach(element => {\n      this.sizeElementBy(delta, element);\n    });\n  }\n\n  sizeElementBy(delta: Point, element: HTMLElement) {\n    const currentBounds = dom.elementBounds(element);\n    let height = currentBounds.height + delta.y;\n    let width = currentBounds.width + delta.x;\n    let left = currentBounds.left;\n    let top = currentBounds.top;\n\n    if (this.isSizingFromTop) {\n      top = currentBounds.top + delta.y;\n      height = currentBounds.height - delta.y;\n      if (this.gripKey === 'tm') {\n        width = currentBounds.width;\n      }\n    }\n    if (this.isSizingFromLeft) {\n      left = currentBounds.left + delta.x;\n      width = currentBounds.width - delta.x;\n      if (this.gripKey === 'lm') {\n        height = currentBounds.height;\n      }\n    }\n\n    if (this.isHorizontalSizing) {\n      height = currentBounds.height;\n    }\n    if (this.isVerticalSizing) {\n      width = currentBounds.width;\n    }\n\n    let boundsRect = new Rect(left, top, width, height);\n    if (width < this.minWidth || height < this.minHeight) {\n      boundsRect = currentBounds;\n    }\n    dom.setElementRect(this.renderer, boundsRect, element);\n  }\n\n  prepareToSize() {}\n\n  canSize(element: Element): boolean {\n    return dom.elementSizable(element);\n  }\n\n  addSizingGrips(parentEl: HTMLElement, renderer: Renderer2): void {\n    const html = `\n      <div class=\"grip-container\">\n        <div class=\"grip-container-l\">\n          <div gripKey=\"tl\" class=\"grip grip-tl\"></div>\n          <div gripKey=\"lm\" class=\"grip grip-lm\"></div>\n          <div gripKey=\"bl\" class=\"grip grip-bl\"></div>\n        </div>\n        <div class=\"grip-container-m\">\n          <div gripKey=\"tm\" class=\"grip grip-tm\"></div>\n          <div gripKey=\"bm\" class=\"grip grip-bm\"></div>\n        </div>\n        <div class=\"grip-container-r\">\n          <div gripKey=\"tr\" class=\"grip grip-tr\"></div>\n          <div gripKey=\"rm\" class=\"grip grip-rm\"></div>\n          <div gripKey=\"br\" class=\"grip grip-br\"></div>\n        </div>\n      </div>\n     `;\n    // const selector = renderer.createElement('div');\n    renderer.setProperty(parentEl, 'innerHTML', html);\n  }\n\n  ngOnDestroy(): void {\n    this.renderer = null;\n  }\n}\n","import { Injectable, Renderer2, OnDestroy, ComponentFactoryResolver, Injector} from '@angular/core';\nimport { Rect, Point } from '../scripts/math';\nimport * as dom from '../scripts/dom';\nimport { SizeService } from '../services/size.service';\nimport { DragService } from '../services/drag.service';\n\nexport interface ISelector {\n  selectorEl: HTMLElement;\n  overlay: HTMLElement;\n  clientEl: HTMLElement;\n}\n\nexport enum SelectionState {\n  Draggable,\n  Sizable,\n  Idle\n}\n\nexport enum NudgeType {\n  Overlay,\n  Selector\n}\n\n@Injectable()\nexport class SelectorService implements OnDestroy {\n  private _lassoSelector: HTMLElement = null;\n  private _selectors = new Array<ISelector>();\n\n  scale: number;\n  lassoCursor = 'crosshair';\n  renderer: Renderer2;\n  interactionHost: HTMLElement;\n  shouldAllowSizing = true;\n  isLassoSelectable = true;\n\n  private _activeSelector: ISelector;\n  get activeSelector(): ISelector {\n    return this._activeSelector;\n  }\n\n  private _state: SelectionState;\n  public get state(): SelectionState {\n    return this._state;\n  }\n  public set state(value: SelectionState) {\n    if (value !== this._state) {\n      this._state = value;\n      if (this.state !== SelectionState.Idle) {\n        this.createSelectionOverlays();\n      }\n    }\n  }\n\n  get hasLasso(): boolean {\n    return this._lassoSelector !== null;\n  }\n\n  get hasElementSelectors(): boolean {\n    return Array.from(this._selectors.entries()).length > 0;\n  }\n\n  get selectors(): ISelector[] {\n    return this._selectors;\n  }\n\n  /**\n   * Represents all selector elements hovering above the captured elements\n   */\n  get selectorElements(): HTMLElement[] {\n    return this.selectors.map(x => x.selectorEl);\n  }\n\n  /**\n   * Represents all the captured elements\n   *\n   */\n  get clients(): HTMLElement[] {\n    return this.selectors.map(x => x.clientEl);\n  }\n\n    get selectableElements(): HTMLElement[] {\n    const children = dom.childrenOf(this.interactionHost).filter(x => dom.isSelectable(x));\n    return children;\n  }\n\n  constructor(\n    private _sizeService: SizeService,\n    private _dragService: DragService,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _injector: Injector\n  ) {}\n\n  createlassoSelector(left: number, top: number) {\n    this.clearSelectors();\n    if (this.isLassoSelectable) {\n      const selector = this.createSelector(left, top, this.interactionHost);\n      this.renderer.setStyle(this.interactionHost, 'cursor', this.lassoCursor);\n      this.renderer.addClass(selector, 'hpc-lasso-selector');\n      this._lassoSelector = selector;\n    }\n  }\n\n  removelassoSelector() {\n    if (this._lassoSelector) {\n      this.renderer.removeChild(this.interactionHost, this._lassoSelector);\n      this._lassoSelector = null;\n    }\n  }\n\n  selectorAtPoint(point: Point): ISelector {\n    for (let index = 0; index < this.selectors.length; index++) {\n      const selector = this.selectors[index];\n      const element = selector.selectorEl;\n      const elRect = element.getBoundingClientRect();\n      const rect = new Rect(\n        elRect.left,\n        elRect.top,\n        elRect.width,\n        elRect.height\n      );\n      if (dom.pointInRect(point, rect)) {\n        return selector;\n      }\n    }\n  }\n\n  selectCapturedElements() {\n    const rect = dom.elementBounds(this._lassoSelector);\n    const capturedElements = dom.elementsAtRect(this.interactionHost, rect, [\n      this._lassoSelector\n    ]);\n    capturedElements.forEach(el => {\n      this.selectElement(el, false, this.shouldAllowSizing);\n    });\n    this.removelassoSelector();\n  }\n\n  unSelectAll() {\n    this.clearSelectors();\n  }\n\n  unSelectElement(element: HTMLElement) {\n    const selector = this.selectors.find(x => x.clientEl === element);\n    if (selector) {\n      this.clearSelector(selector);\n    }\n  }\n\n  selectAll() {\n    this.clearSelectors();\n    const children = this.selectableElements;\n    children.forEach(child => {\n        this.selectElement(child, false);\n    });\n  }\n\n  selectElement(element: HTMLElement, clearFirst = true, isSizable = true) {\n    let selector = this.selectors.find(\n      x =>\n        x.selectorEl === element ||\n        x.clientEl === element ||\n        x.overlay === element\n    );\n    if (element.hasAttribute('gripKey')) {\n      selector = this.selectors.find(\n        x => x.selectorEl === element.parentElement.parentElement.parentElement\n      );\n      const cursor = getComputedStyle(element).cursor;\n      this.renderer.setStyle(this.interactionHost, 'cursor', cursor);\n      this._sizeService.gripKey = element.getAttribute('gripKey');\n      this.state = SelectionState.Sizable;\n      return;\n    }\n\n    if (selector) {\n      this.state = SelectionState.Idle;\n      this._activeSelector = selector;\n      return;\n    }\n    if (clearFirst) {\n      this.clearSelectors();\n    }\n    const rect = dom.elementBounds(element);\n    const selectorEl = this.createSelector(\n      rect.left,\n      rect.top,\n      element.parentElement\n    );\n    selectorEl['isSelector'] = true;\n    dom.assignBoundingRect(this.renderer, element, selectorEl);\n    this.renderer.addClass(selectorEl, 'hpc-element-selector');\n    selector = { clientEl: element, selectorEl: selectorEl, overlay: null };\n    this._selectors.push(selector);\n    this._activeSelector = selector;\n    if (isSizable && this._sizeService.canSize(element)) {\n      this._sizeService.addSizingGrips(selectorEl, this.renderer);\n    }\n    if (dom.elementDraggable(element)) {\n      this.renderer.setStyle(this.interactionHost, 'cursor', 'move');\n    }\n    this.state = SelectionState.Idle;\n  }\n\n  createSelectionOverlays() {\n    this.selectors.forEach(selector => {\n      this._sizeService.removeSizingGrips(selector.selectorEl, this.renderer);\n      if (selector.overlay) {\n        this.renderer.removeChild(\n          selector.selectorEl.parentElement,\n          selector.overlay\n        );\n      }\n      if (\n        this.state === SelectionState.Sizable &&\n        this._sizeService.canSize(selector.clientEl)\n      ) {\n        selector.overlay = this._sizeService.createSizingOverlay(\n          selector.selectorEl\n        );\n      } else if (\n        this.state === SelectionState.Draggable &&\n        this._dragService.canDrag(selector.clientEl)\n      ) {\n        selector.overlay = this._dragService.createDragOverlay(\n          selector.clientEl\n        );\n      }\n      if (selector.overlay) {\n        this.renderer.appendChild(\n          selector.selectorEl.parentElement,\n          selector.overlay\n        );\n      }\n    });\n  }\n\n  createSelector(left: number, top: number, parent: Element): HTMLElement {\n    const selector = this.renderer.createElement('div');\n    this.renderer.appendChild(parent, selector);\n    this.renderer.setStyle(selector, 'position', 'absolute');\n    this.renderer.setStyle(selector, 'left', left + 'px');\n    this.renderer.setStyle(selector, 'top', top + 'px');\n    this.renderer.setStyle(selector, 'boxSizing', 'border-box');\n    this.renderer.setStyle(selector, 'zIndex', '10000');\n    return selector;\n  }\n\n  clearSelectors() {\n    this.removelassoSelector();\n    const selectors = Array.from(this._selectors.values());\n    selectors.forEach(selector => {\n      this.clearSelector(selector);\n    });\n    this._selectors = [];\n  }\n\n  clearSelector(selector: ISelector) {\n    if (selector === this._activeSelector) {\n      this._activeSelector = null;\n    }\n    this.renderer.removeChild(\n      selector.selectorEl.parentElement,\n      selector.selectorEl\n    );\n    if (selector.overlay) {\n      this.renderer.removeChild(\n        selector.overlay.parentElement,\n        selector.overlay\n      );\n    }\n    this.selectors.splice(this.selectors.indexOf(selector), 1);\n  }\n\n  resizeLasso(width: number, height: number, initialPos: Point) {\n    if (height < 0) {\n      height = Math.abs(height);\n      const top = initialPos.y - height;\n      this.renderer.setStyle(this._lassoSelector, 'top', top + 'px');\n    }\n    if (width < 0) {\n      width = Math.abs(width);\n      const left = initialPos.x - width;\n      this.renderer.setStyle(this._lassoSelector, 'left', left + 'px');\n    }\n    this.renderer.setStyle(this._lassoSelector, 'height', height + 'px');\n    this.renderer.setStyle(this._lassoSelector, 'width', width + 'px');\n  }\n\n  resizeSelectorsBy(delta: Point) {\n    const selectors = this.selectors.map(x => x.selectorEl);\n    this._sizeService.sizeElementsBy(delta, selectors);\n  }\n\n  resizeOverlaysBy(delta: Point) {\n    const overlays = this.selectors.map(x => x.overlay);\n    this._sizeService.sizeElementsBy(delta, overlays);\n  }\n\n  moveSelectorsBy(delta: Point) {\n    const selectors = this.selectors.map(x => x.overlay);\n    this._dragService.dragElementsBy(delta, selectors);\n  }\n\n  moveOverlaysBy(delta: Point) {\n    const overlays = this.selectors.map(x => x.overlay);\n    this._dragService.dragElementsBy(delta, overlays);\n  }\n\n  reselect() {\n    const clients = this.clients;\n    this.clearSelectors();\n    clients.forEach(client => {\n      this.selectElement(client, false, this.shouldAllowSizing);\n    });\n  }\n\n  nudgeBy(delta: Point, nodgeType: NudgeType) {\n    if (delta.x === 0 && delta.y === 0) {\n      return;\n    }\n    if (this.state === SelectionState.Sizable) {\n      if (nodgeType === NudgeType.Selector) {\n        this.resizeSelectorsBy(delta);\n      }\n      if (nodgeType === NudgeType.Overlay) {\n        this.resizeOverlaysBy(delta);\n      }\n    } else if (this.state === SelectionState.Draggable) {\n      if (nodgeType === NudgeType.Selector) {\n        this.moveSelectorsBy(delta);\n      }\n      if (nodgeType === NudgeType.Overlay) {\n        this.moveOverlaysBy(delta);\n      }\n    } else {\n      this.state = SelectionState.Draggable;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearSelectors();\n    this.renderer = null;\n    this.interactionHost = null;\n  }\n}\n","import {Injectable, Renderer2, OnDestroy} from '@angular/core';\nimport { Subject, Observable, BehaviorSubject} from 'rxjs';\nimport { SelectorService } from '../selector/selector.service';\nimport * as dom from '../scripts/dom';\n\n@Injectable()\nexport class InteractionService implements OnDestroy {\n  private _deleteElementSubject = new Subject<Element>();\n  deleteElement$ = this._deleteElementSubject.asObservable();\n\n  private _deleteElementsSubject = new Subject<Element[]>();\n  deleteElements$ = this._deleteElementSubject.asObservable();\n\n  private _deleteSelectedElementsSubject = new Subject();\n  deleteSelectedElements$ = this._deleteSelectedElementsSubject.asObservable();\n\n  private _addElementSubject = new Subject<Element>();\n  addElement$ = this._addElementSubject.asObservable();\n\n  private _selectedElementsSubject = new BehaviorSubject<Element[]>(null);\n  selectedElements$ = this._selectedElementsSubject.asObservable();\n\n  private _selectedElements: Element[] = [];\n  get selectedElements(): Element[] {\n    return this._selectedElements;\n  }\n  set selectedElements(elements: Element[]) {\n    this._selectedElements = elements;\n    this._selectedElementsSubject.next(elements);\n  }\n  get hasSelectedElements(): boolean {\n    return this._selectedElements && this._selectedElements.length > 0;\n  }\n\n  get canSelectElements(): boolean {\n    return this._selectionService.selectableElements.length > 0;\n  }\n\n  renderer: Renderer2;\n  interactionHost: HTMLElement;\n\n  constructor(private _selectionService: SelectorService) { }\n\n  /**\n   * remove an element from the interaction host\n   * @param element - the element to remove\n   * @param renderer - the renderer used to remove the element\n   */\n  deleteElement(element: Element) {\n     this.renderer.removeChild(element.parentElement, element);\n     this._deleteElementSubject.next(element);\n  }\n\n  /**\n   * remove a list of elements from the interaction host\n   * @param element - the elements to remove\n   * @param renderer - the renderer used to remove the elements\n   */\n  deleteElements(elements: Element[]) {\n    elements.forEach(element => {\n      this.renderer.removeChild(element.parentElement, element);\n    });\n    this._deleteElementsSubject.next(elements);\n  }\n\n  deleteSelectedElements() {\n    this._deleteSelectedElementsSubject.next();\n  }\n\n  deleteAll() {\n    this._selectionService.unSelectAll();\n    const children = dom.childrenOf(this.interactionHost);\n    for (let index = children.length - 1; index >= 0; index--) {\n      const element = children[index];\n      this.renderer.removeChild(this.interactionHost, element);\n    }\n  }\n\n  addElement(element: Element = null) {\n    if (!element) {\n       element = this.renderer.createElement('div');\n       this.renderer.addClass(element, 'hpc-new-element');\n    }\n    this.renderer.setStyle(element, 'box-sizing', 'border-box');\n    this.renderer.setStyle(element, 'position', 'absolute');\n    this.renderer.appendChild(this.interactionHost, element);\n    this._selectionService.selectElement(element as HTMLElement);\n    this.interactionHost.focus();\n    this._addElementSubject.next(element);\n  }\n\n  addContainer(element: Element = null) {\n    if (!element) {\n      element = this.renderer.createElement('div');\n      this.renderer.addClass(element, 'hpc-new-element');\n    }\n    this.renderer.addClass(element, 'hpc-dropzone');\n    this.renderer.addClass(element, 'hpc-container');\n    this.addElement(element);\n  }\n\n  selectAll() {\n    this._selectionService.selectAll();\n    this.selectedElements = this._selectionService.clients;\n  }\n\n  unSelectAll() {\n    this._selectionService.unSelectAll();\n    this.selectedElements = this._selectionService.clients;\n  }\n\n  ngOnDestroy(): void {\n    this.renderer = null;\n  }\n}\n","import {\n  Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy,\n  Input, Renderer2, ViewChild, ElementRef, Output, EventEmitter, OnDestroy\n} from '@angular/core';\nimport { debounceTime, distinctUntilKeyChanged, map } from 'rxjs/operators';\nimport { DragService } from '../services/drag.service';\nimport { SizeService } from '../services/size.service';\nimport { SelectorService, SelectionState, NudgeType } from '../selector/selector.service';\nimport * as dom from '../scripts/dom';\nimport { Point } from '../scripts/math';\nimport { InteractionService } from './interaction.service';\nimport { Subject, Observable, Subscription } from 'rxjs';\n\n\nexport type ICancellable = ( value: any )  => boolean;\n\n/**\n * Handles selection, sizing, deletions, and dragging interactions with any child Element.\n */\n\n@Component({\n  selector: 'hpc-interaction',\n  templateUrl: './interaction.component.html',\n  styleUrls: ['./interaction.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class InteractionComponent implements OnInit, OnDestroy {\n  private _isMouseDown = false;\n  private _mouseDownPos = new Point();\n  private _lastMousePos: Point;\n  private _cursor: string;\n  private _lastDropZone: HTMLElement;\n  private _deleteSelectedElementsSubscription: Subscription;\n  private _addElementSubscription: Subscription;\n\n  @ViewChild('interactionContainer')\n  private _el: ElementRef;\n  private _keyDownSubject = new Subject<KeyboardEvent>();\n\n  /**\n   * Scale value to apply to the Interaction host element.  The value is applied\n   * to both scaleX and scaleY of the host element.\n   */\n  @Input()\n  scale = 1;\n\n  /**\n   * Determins if elements span when sized or dragged\n   */\n  @Input()\n  snap = 0;\n\n  /**\n   * Gets or sets the minimum width of the element when drag-sized.\n   */\n  @Input()\n  minSizingWidth = 30;\n\n  /**\n   * Gets or sets the minimum height of the element when drag-sized.\n   */\n  @Input()\n  minSizingHeight = 30;\n\n  /**\n   * Determines if elements can be selected by dragging around (lasso) them and releasing the pointer.\n   */\n  @Input()\n  isLassoSelectable = true;\n\n  /**\n   * Optionally set \"checkers\" background for the interaction host.  Useful when building IDE-like interactive UI.\n   */\n  @Input()\n  isCheckersBackground = false;\n\n  @Output()\n  resizedElement = new EventEmitter<HTMLElement>();\n  @Output()\n  resizedElements = new EventEmitter<HTMLElement[]>();\n  @Output()\n  movedElement = new EventEmitter<HTMLElement>();\n  @Output()\n  movedElements = new EventEmitter<HTMLElement[]>();\n  @Output()\n  selectElement = new EventEmitter<HTMLElement>();\n\n  @Input()\n  canDelete: ICancellable = () => true\n\n  @Input()\n  canDrop: ICancellable = () => true\n\n  constructor(\n    private _renderer: Renderer2,\n    private _dragService: DragService,\n    private _sizeService: SizeService,\n    private _interactionService: InteractionService,\n    private _selectionService: SelectorService\n  ) {\n    this._selectionService.renderer = this._renderer;\n    this._sizeService.renderer = this._renderer;\n    this._dragService.renderer = this._renderer;\n    this._interactionService.renderer = this._renderer;\n    this._keyDownSubject.subscribe(e => this.keyDownHandler(e));\n  }\n\n  /**\n   * Called when the keyboard key is released.\n   * @param e KeyboardEvent\n   */\n  keyUp(e: KeyboardEvent) {\n    if (e.code === 'Delete' && this._selectionService.selectors.length > 0) {\n      this.deleteSelectedElements();\n    }\n  }\n\n  /**\n   * Called when the keyboard key is pressed.\n   * @param e KeyboardEvent\n   */\n  keyPress(e) {\n    if (this._selectionService.selectors.length > 0) {\n      e.stopPropagation();\n    }\n  }\n\n  /**\n   * Called when the keyboard key is pressed.\n   * @param e KeyboardEvent\n   */\n  keyDown(e: KeyboardEvent) {\n    this._keyDownSubject.next(e);\n  }\n\n  keyDownHandler(e: KeyboardEvent) {\n    // debounceTime(5000);\n    /*    if (\n      e.code !== 'Delete' &&\n      e.code !== 'Escape' &&\n      e.code !== 'ArrowLeft' &&\n      e.code !== 'ArrowUp' &&\n      e.code !== 'ArrowRight' &&\n      e.code !== 'ArrowDown'\n    ) {\n      return;\n    }*/\n    if (this._selectionService.selectors.length > 0) {\n      let delta: Point;\n      const snap = this.snap ? this.snap : 1;\n      if (e.code === 'Escape') {\n        this.cancelSelection();\n      }\n      if (e.shiftKey) {\n        if (e.ctrlKey) {\n          switch (\n            e.code\n            /*         case 37:\n              self.alignSelectedElements(AlignPosition.Left);\n              break;\n            case 38:\n              self.alignSelectedElements(AlignPosition.Top);\n              break;\n            case 39:\n              self.alignSelectedElements(AlignPosition.Right);\n              break;\n            case 40:\n              self.alignSelectedElements(AlignPosition.Bottom);\n              break; */\n          ) {\n          }\n        } else {\n          delta = new Point();\n          switch (e.code) {\n            case 'ArrowLeft':\n              delta = new Point(-snap, 0);\n              break;\n            case 'ArrowUp':\n              delta = new Point(0, -snap);\n              break;\n            case 'ArrowRight':\n              delta = new Point(snap, 0);\n              break;\n            case 'ArrowDown':\n              delta = new Point(0, snap);\n              break;\n          }\n          this._sizeService.gripKey = 'keyboard';\n          this._sizeService.sizeElementsBy(\n            delta,\n            this._selectionService.selectorElements\n          );\n          this._sizeService.sizeElementsBy(\n            delta,\n            this._selectionService.clients\n          );\n        }\n      } else {\n        delta = new Point();\n        switch (e.code) {\n          case 'ArrowLeft':\n            delta = new Point(-snap, 0);\n            break;\n          case 'ArrowUp':\n            delta = new Point(0, -snap);\n            break;\n          case 'ArrowRight':\n            delta = new Point(snap, 0);\n            break;\n          case 'ArrowDown':\n            delta = new Point(0, snap);\n            break;\n        }\n\n        this._dragService.dragElementsBy(\n          delta,\n          this._selectionService.selectorElements\n        );\n        this._dragService.dragElementsBy(delta, this._selectionService.clients);\n      }\n    }\n  }\n\n  /**\n   * Ensures that the default HTML5 dragging operations do not execute.\n   */\n  dragStart() {\n    // -- prevent default drag\n    return false;\n  }\n\n  /**\n   * Called when the pointer is moved.\n   * @param e PointerEvent\n   */\n  pointerMove(e: PointerEvent) {\n    e.preventDefault();\n    if (this._isMouseDown) {\n      let mousePos = this.getRelativePointerPos(e);\n      if (this._selectionService.hasLasso) {\n        const mouseDownPos = this._mouseDownPos;\n        this._selectionService.resizeLasso(\n          mousePos.x - mouseDownPos.x,\n          mousePos.y - mouseDownPos.y,\n          mouseDownPos\n        );\n      } else if (this._selectionService.selectors.length > 0) {\n        const mouseChange = this.getPointerChange(e);\n        this._selectionService.nudgeBy(mouseChange[0], NudgeType.Overlay);\n        mousePos = mouseChange[1];\n        this._lastDropZone = this._dragService.updateDropZone(\n          this._selectionService.activeSelector.overlay,\n          this._el.nativeElement,\n          [this._selectionService.activeSelector.clientEl]\n        );\n      }\n      this._lastMousePos = mousePos;\n    } else {\n      this.ensureCursor(e);\n    }\n  }\n\n  /**\n   * Called when the pointer is pressed.\n   * @param e PointerEvent\n   */\n  pointerDown(e: PointerEvent) {\n    this._isMouseDown = true;\n    this._mouseDownPos = this.getRelativePointerPos(e);\n    this._lastMousePos = this._mouseDownPos;\n    if (e.target === this._el.nativeElement) {\n      this._selectionService.createlassoSelector(\n        this._mouseDownPos.x,\n        this._mouseDownPos.y\n      );\n    } else {\n      const element = e.target as HTMLElement;\n      this._selectionService.selectElement(element, !e.shiftKey);\n    }\n  }\n\n  /**\n   * Called when the pointer is released.\n   * @param e PointerEvent\n   */\n  pointerUp(e: PointerEvent) {\n    this._isMouseDown = false;\n    if (this._selectionService.hasLasso) {\n      this._selectionService.selectCapturedElements();\n    } else {\n      if (this._selectionService.state === SelectionState.Draggable) {\n        this.moveSelectedElements(NudgeType.Overlay, false);\n        this.tryDropSelectedElements();\n      } else if (this._selectionService.state === SelectionState.Sizable) {\n        this.resizeSelectedElements();\n      }\n      this._dragService.clearDropZones(this._el.nativeElement);\n    }\n    this._renderer.setStyle(this._el.nativeElement, 'cursor', this._cursor);\n    this._lastDropZone = null;\n    this._interactionService.selectedElements = this._selectionService.clients;\n  }\n\n\n  /**\n   * Attemps to drop the currently selected elements into a drop zone\n   * @param e PointerEvent\n   */\n  tryDropSelectedElements() {\n    const selectors = this._selectionService.selectors;\n    selectors.forEach(selector => {\n      if (this.canDrop(selector.clientEl)) {\n        this._dragService.dropElement(\n          this._lastDropZone,\n          selector.clientEl,\n          this._el.nativeElement\n        );\n      }\n    });\n    this._selectionService.reselect();\n  }\n\n  /**\n   * Ensures that the appropriate cursor is set when element is draggable.\n   * @param e PointerEvent\n   */\n  ensureCursor(e: PointerEvent) {\n    const mousePos = new Point(e.pageX, e.pageY);\n    const selector = this._selectionService.selectorAtPoint(mousePos);\n    if (selector && dom.elementDraggable(selector.clientEl)) {\n      this._renderer.setStyle(this._el.nativeElement, 'cursor', 'move');\n    } else {\n      this._renderer.setStyle(this._el.nativeElement, 'cursor', 'default');\n    }\n  }\n\n  /**\n   * Resizes the selected elements to match the Selector overlay\n   */\n  resizeSelectedElements() {\n    const selectors = this._selectionService.selectors;\n    const sizedElements = [];\n    selectors.forEach(selector => {\n      if (dom.elementSizable(selector.clientEl)) {\n        sizedElements.push(selector.clientEl);\n        dom.assignBoundingRect(\n          this._renderer,\n          selector.overlay,\n          selector.clientEl\n        );\n        this.resizedElement.emit(selector.clientEl);\n      }\n    });\n    this.resetSelection();\n    if (sizedElements.length > 0) {\n      this.resizedElements.emit(sizedElements);\n    }\n  }\n\n  /**\n   * Moves selected elements to the current location of the selector or selector overlay.\n   * @param nudgeType determines where the selected elements should be moved.  Options are\n   * to move to the actual selector (NudgeType.Selector) or the selector overlay (NodgeType.Overlay).\n   * Usually only the overlay is dragged/moved, hence the default of NudgeType.Overlay.\n   * @param resetAfterMove determines if the selector should reset itself after every move.\n   */\n  moveSelectedElements(\n    nudgeType: NudgeType = NudgeType.Overlay,\n    resetAfterMove = true\n  ) {\n    const selectors = this._selectionService.selectors;\n    const movedElements = [];\n    selectors.forEach(selector => {\n      if (dom.elementDraggable(selector.clientEl)) {\n        movedElements.push(selector.clientEl);\n        dom.assignPosition(\n          this._renderer,\n          nudgeType === NudgeType.Overlay\n            ? selector.overlay\n            : selector.selectorEl,\n          selector.clientEl\n        );\n        this.movedElement.emit(selector.clientEl);\n      }\n    });\n    if (resetAfterMove) {\n      this.resetSelection();\n    }\n    if (movedElements.length > 0) {\n      this.movedElements.emit(movedElements);\n    }\n  }\n\n  /**\n   * Deletes selected elements.\n   */\n  deleteSelectedElements() {\n    const selectors = this._selectionService.selectors;\n    const deletedElements = [];\n    for (let index = selectors.length - 1; index >= 0; index--) {\n      const selector = selectors[index];\n      if (this.canDelete(selector.clientEl)) {\n        const el = selector.clientEl;\n        this._selectionService.clearSelector(selector);\n        this._interactionService.deleteElement(el);\n        deletedElements.push(el);\n      }\n    }\n    this._interactionService.deleteElements(deletedElements);\n    this._interactionService.selectedElements = this._selectionService.clients;\n  }\n\n  /**\n   * Add a new child element to the host element.\n   */\n  addElement(element: Element) {\n    const selector = this._selectionService.activeSelector;\n    const parent = selector && dom.isContainer(selector.clientEl) ? selector.clientEl : this._el.nativeElement;\n    this._renderer.appendChild(parent, element);\n  }\n\n  /**\n   * Gets the mouse position relative to the offset and scale of the host element.\n   * @param e PointerEvent\n   */\n  getRelativePointerPos(e: PointerEvent) {\n    return dom.getRelativePointerPos(e, this._el.nativeElement, this.scale);\n  }\n\n  /**\n   * Gets pointer coordinates changes relative to the selected element.\n   * @param e PointerEvent\n   */\n  getPointerChange(e: PointerEvent): any[] {\n    const pointerPos = this.getRelativePointerPos(e);\n    let left = pointerPos.x - this._lastMousePos.x;\n    let top = pointerPos.y - this._lastMousePos.y;\n    if (this.snap) {\n      if (left % this.snap !== 0) {\n        left = 0;\n        pointerPos.x = this._lastMousePos.x;\n      }\n      if (top % this.snap !== 0) {\n        top = 0;\n        pointerPos.y = this._lastMousePos.y;\n      }\n    }\n    return [new Point(left, top), pointerPos];\n  }\n\n  /**\n   * Re-selects the currently selected elements.  Usually happens after\n   * an element is moved or resized.\n   */\n  resetSelection() {\n    this._selectionService.reselect();\n  }\n\n  /**\n   * Cancels the current selections or drag operation.  If the elements are being dragged,\n   * the drag operation is cancelled and the elements reselected.  Otherwise, the elements\n   * are unselected.\n   */\n  cancelSelection() {\n    if (this._isMouseDown) {\n      this._selectionService.reselect();\n    } else {\n      this._selectionService.clearSelectors();\n    }\n  }\n\n  ngOnInit() {\n    if (this._el.nativeElement && this._renderer) {\n      this._interactionService.interactionHost = this._el.nativeElement;\n      this._selectionService.interactionHost = this._el.nativeElement;\n      this._selectionService.isLassoSelectable = this.isLassoSelectable;\n      this._cursor = getComputedStyle(this._el.nativeElement).cursor;\n      this._deleteSelectedElementsSubscription = this._interactionService.deleteSelectedElements$.subscribe(\n        () => {\n           this.deleteSelectedElements();\n        }\n      );\n      this._addElementSubscription = this._interactionService.addElement$.subscribe(\n        element => {\n          // this.addElement(element);\n        }\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._lastDropZone = null;\n    this._deleteSelectedElementsSubscription.unsubscribe();\n    this._addElementSubscription.unsubscribe();\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'hpc-composer',\n  templateUrl: './composer.component.html',\n  styleUrls: ['./composer.component.css']\n})\nexport class ComposerComponent implements OnInit {\n\n  @Input() headerVisible = true;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hpc-treeview',\n  templateUrl: './treeview.component.html',\n  styleUrls: ['./treeview.component.css']\n})\nexport class TreeviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hpc-treeview-item',\n  templateUrl: './treeview-item.component.html',\n  styleUrls: ['./treeview-item.component.css']\n})\nexport class TreeviewItemComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hpc-selector',\n  templateUrl: './selector.component.html',\n  styleUrls: ['./selector.component.css']\n})\nexport class SelectorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hpc-file-manager',\n  templateUrl: './file-manager.component.html',\n  styleUrls: ['./file-manager.component.css']\n})\nexport class FileManagerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hpc-property-grid',\n  templateUrl: './property-grid.component.html',\n  styleUrls: ['./property-grid.component.css']\n})\nexport class PropertyGridComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { InteractionComponent } from './interaction/interaction.component';\nimport { ComposerComponent } from './composer/composer.component';\nimport { TreeviewComponent } from './treeview/treeview.component';\nimport { TreeviewItemComponent } from './treeview/treeview-item/treeview-item.component';\nimport { SelectorComponent } from './selector/selector.component';\nimport {CommonModule} from '@angular/common';\nimport {DragService} from './services/drag.service';\nimport {SizeService} from './services/size.service';\nimport {InteractionService} from './interaction/interaction.service';\nimport {SelectorService} from './selector/selector.service';\nimport { FileManagerComponent } from './file-manager/file-manager.component';\nimport { PropertyGridComponent } from './property-grid/property-grid.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    InteractionComponent,\n    ComposerComponent,\n    TreeviewComponent,\n    TreeviewItemComponent,\n    SelectorComponent,\n    FileManagerComponent,\n    PropertyGridComponent\n  ],\n  exports: [\n    InteractionComponent,\n    ComposerComponent,\n    TreeviewComponent\n  ],\n  providers: [\n    DragService,\n    SizeService,\n    InteractionService,\n    SelectorService\n  ]\n})\nexport class HpComponentsModule { }\n"]}